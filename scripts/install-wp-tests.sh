#!/usr/bin/env bash
set -euo pipefail

usage() {
    cat <<USAGE
Usage: $0 [db-name] [db-user] [db-pass] [db-host] [wp-version]

Installs a local copy of WordPress core and the PHPUnit test library that
mirrors the expectations of the Ma Galerie Automatique test suite.

Arguments:
  db-name     Name of the database to create/use for tests (default: wordpress_tests)
  db-user     MySQL user with privileges to create/drop the database (default: root)
  db-pass     Password for the MySQL user (default: '')
  db-host     MySQL host and optional port/socket (default: localhost)
  wp-version  WordPress version or 'latest' to track trunk (default: latest)
USAGE
}

if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    usage
    exit 0
fi

DB_NAME=${1:-wordpress_tests}
DB_USER=${2:-root}
DB_PASS=${3:-}
DB_HOST=${4:-localhost}
WP_VERSION=${5:-latest}

PROJECT_ROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)
INSTALL_ROOT="${PROJECT_ROOT}/.wordpress-tests"
WP_CORE_DIR="${WP_CORE_DIR:-${INSTALL_ROOT}/wordpress}"
WP_TESTS_DIR="${WP_PHPUNIT__DIR:-${INSTALL_ROOT}/wordpress-tests-lib}"

mkdir -p "${WP_CORE_DIR}" "${WP_TESTS_DIR}"

for tool in curl tar rsync; do
    if ! command -v "${tool}" >/dev/null 2>&1; then
        echo "${tool} is required but was not found in PATH." >&2
        exit 1
    fi
done

# Download and extract the requested WordPress develop snapshot.
download_wordpress_develop() {
    local version="$1"
    local tmp_dir
    tmp_dir=$(mktemp -d)
    trap 'rm -rf "${tmp_dir}"' EXIT

    local ref="${version}"
    local archive_url

    if [[ "${version}" == "latest" || "${version}" == "trunk" ]]; then
        ref="trunk"
        archive_url="https://github.com/WordPress/wordpress-develop/archive/refs/heads/${ref}.tar.gz"
    else
        ref="${version}"
        archive_url="https://github.com/WordPress/wordpress-develop/archive/refs/tags/${ref}.tar.gz"
    fi

    echo "Downloading WordPress develop (${ref})…"
    curl -L "${archive_url}" | tar -xz -C "${tmp_dir}"

    local extracted
    extracted=$(find "${tmp_dir}" -maxdepth 1 -type d -name 'wordpress-develop-*' | head -n1)

    if [[ -z "${extracted}" ]]; then
        echo "Unable to locate the extracted wordpress-develop archive" >&2
        exit 1
    fi

    echo "Copying WordPress core to ${WP_CORE_DIR}"
    rsync -a --delete "${extracted}/src/" "${WP_CORE_DIR}/"

    echo "Copying PHPUnit test library to ${WP_TESTS_DIR}"
    rsync -a --delete "${extracted}/tests/phpunit/" "${WP_TESTS_DIR}/"
}

download_wordpress_develop "${WP_VERSION}"

create_db() {
    if ! command -v mysql >/dev/null 2>&1; then
        echo "mysql client not found; skipping automatic database creation." >&2
        return
    fi

    local socket_argument=""
    local hostpart="${DB_HOST}"

    if [[ "${DB_HOST}" == *:* ]]; then
        hostpart="${DB_HOST%%:*}"
        local portpart="${DB_HOST#*:}"
        if [[ "${portpart}" == /* ]]; then
            socket_argument="--socket=${portpart}"
        else
            socket_argument="--port=${portpart}"
        fi
    fi

    echo "Creating MySQL database ${DB_NAME} (if missing)…"
    local -a mysql_args=("--protocol=tcp" "-u${DB_USER}" "-h${hostpart}")
    if [[ -n "${DB_PASS}" ]]; then
        mysql_args+=("-p${DB_PASS}")
    fi
    if [[ -n "${socket_argument}" ]]; then
        mysql_args+=("${socket_argument}")
    fi

    if ! mysql "${mysql_args[@]}" -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};"; then
        echo "Warning: failed to create database ${DB_NAME}." >&2
    fi
}

create_db

CONFIG_FILE="${WP_TESTS_DIR}/wp-tests-config.php"

if [[ -f "${CONFIG_FILE}" ]]; then
    echo "Existing wp-tests-config.php detected at ${CONFIG_FILE}; leaving untouched."
else
    cat > "${CONFIG_FILE}" <<PHP
<?php
/**
 * Generated by scripts/install-wp-tests.sh
 */
define( 'DB_NAME', '${DB_NAME}' );
define( 'DB_USER', '${DB_USER}' );
define( 'DB_PASSWORD', '${DB_PASS}' );
define( 'DB_HOST', '${DB_HOST}' );
define( 'DB_CHARSET', 'utf8' );
define( 'DB_COLLATE', '' );

define( 'WP_TESTS_DOMAIN', 'example.org' );
define( 'WP_TESTS_EMAIL', 'admin@example.org' );
define( 'WP_TESTS_TITLE', 'WordPress Tests' );
define( 'WP_PHP_BINARY', PHP_BINARY );
define( 'WPLANG', '' );

\$config_extra = '${PROJECT_ROOT}/tests/phpunit/wp-tests-config-extra.php';
if ( file_exists( \$config_extra ) ) {
    require \$config_extra;
}
PHP
    echo "Created wp-tests-config.php at ${CONFIG_FILE}."
fi

echo "WordPress test library ready in ${WP_TESTS_DIR}"
echo "Remember to export WP_PHPUNIT__DIR=\"${WP_TESTS_DIR}\" when running phpunit."
